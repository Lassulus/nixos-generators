#!/usr/bin/env bash

######################
#                    #
#       COLORS       #
#                    #
######################
LRED='\033[01;31m'
LYELLOW='\033[01;33m'
NC='\033[0m' # No Color

######################
#                    #
#     FUNCTIONS      #
#                    #
######################
function help()
{

echo -e "${0} $LYELLOW<mode>$NC <options>

Mode:
    kvm virtualbox openstack kexec iso install-iso

Options:
    -c, --config
        Nix configuration file as absolute path. Default: ./config.nix
    -i, --image
        Absolut path to generate image to.
    -s, --script
        Scriptable output
    "
    exit 1
}

######################
#                    #
#        INIT        #
#                    #
######################
set -o errexit

CONFIG="./config.nix"

if [ "$#" == "0" ]; then
    help
    exit 1
fi

# Get mode arg
MODE=${1}
shift

# options
IMAGE_NAME=""
SCRIPT_MODE=false

# Parse args
while (( "$#" )); do

    if [ "$1" == "-i" ] || [ "$1" == "--image" ]; then
        IMAGE_NAME="$2"
        shift 2

    elif [ "$1" == "-s" ] || [ "$1" == "--script" ]; then
        SCRIPT_MODE=true
        shift

    elif [ "$1" == "-c" ] || [ "$1" == "--config" ]; then
        CONFIG="$2"
        shift 2
    else
        echo -e "$LRED[-] Invalid option found: $1 $NC"
        exit 1
    fi

done

# Check if nix config exists
if [ ! -e "$CONFIG" ]; then
    echo -e "$LRED[-] Configfile '$CONFIG' not found$NC"
    exit 1
fi


# Default settings
VM_SETTINGS="$(mktemp)"


######################
#                    #
#       KVM          #
#                    #
######################
if [ "$MODE" == "kvm" ]; then

IMAGE_NAME="./nixos.qcow2"
cat > "$VM_SETTINGS" << EndOfMessage
{ ... }:
{
  imports = [
    <nixpkgs/nixos/modules/virtualisation/qemu-vm.nix>
    <nixcfg>
  ];

  virtualisation.qemu.networkingOptions = [
    "-net nic,netdev=user.0,model=virtio"
    "-netdev user,id=user.0\\\${QEMU_NET_OPTS:+,\\\$QEMU_NET_OPTS},hostfwd=tcp::8088-:80,hostfwd=tcp::8022-:22"
  ];
  virtualisation.graphics = false;

  virtualisation.diskImage = "$IMAGE_NAME";
}
EndOfMessage

    VM=$( nix-build --no-out-link '<nixpkgs/nixos>' \
        -A config.system.build.vm \
        -I nixos-config="$VM_SETTINGS" \
        -I nixcfg="${CONFIG}" \
        )

    echo "${VM}"
    # Run after build
    # eval "${VM}/bin/run-nixos-vm"

######################
#                    #
#    VIRTUALBOX      #
#                    #
######################
elif [ "$MODE" == "virtualbox" ]; then
IMAGE_NAME="./nixos.ova"
    cat > "$VM_SETTINGS" << EndOfMessage
{ ... }:
{
  imports = [
    <nixpkgs/nixos/modules/virtualisation/virtualbox-image.nix>
    <nixcfg>
  ];

  virtualisation.virtualbox.vmFileName = "$IMAGE_NAME";
}
EndOfMessage

   VBOX_DIR=$( nix-build --no-out-link '<nixpkgs/nixos>' \
        -A config.system.build.virtualBoxOVA \
        -I nixos-config="$VM_SETTINGS" \
        -I nixcfg="${CONFIG}" )

if [ $SCRIPT_MODE ]; then
   echo "$VBOX_DIR"
else
    echo "[+] Generated virtualbox image to: $VBOX_DIR/*.ova"
fi


######################
#                    #
#     OPENSTACK      #
#                    #
######################
elif [ "$MODE" == "openstack" ]; then
IMAGE_NAME="./nixos.openstack"
cat > "$VM_SETTINGS" << EndOfMessage
{ ... }:
{
  imports = [
    <nixpkgs/nixos/maintainers/scripts/openstack/nova-image.nix>
    <nixcfg>
  ];
}
EndOfMessage

OPENSTACK_DIR=$( nix-build --no-out-link '<nixpkgs/nixos>' \
    -A config.system.build.novaImage \
    -I nixos-config="$VM_SETTINGS" \
    -I nixcfg="${CONFIG}" )

if [ $SCRIPT_MODE ]; then
    echo " $OPENSTACK_DIR/*.qcow2"
else
    echo "[+] Generated openstack image to: $OPENSTACK_DIR/*.qcow2"
fi

######################
#                    #
#       KEXEC        #
#                    #
######################
elif [ "$MODE" == "kexec" ]; then
IMAGE_NAME="./nixos.kexec"
cat > "$VM_SETTINGS" << EndOfMessage
{ lib, ... }: let

  clever-tests = builtins.fetchGit {
    url = https://github.com/cleverca22/nix-tests;
    rev = "4761ec62c4056f2b1df4d468a1e129b808734221"; #master on 2018-05-20
  };
in {
  imports = [
    <nixpkgs/nixos/modules/installer/netboot/netboot-minimal.nix>
    <nixcfg>
    "\${clever-tests}/kexec/autoreboot.nix"
    "\${clever-tests}/kexec/kexec.nix"
    "\${clever-tests}/kexec/justdoit.nix"
  ];
  boot.loader.grub.enable = false;
  boot.kernelParams = [
    "console=ttyS0,115200"          # allows certain forms of remote access, if the hardware is setup right
    "panic=30" "boot.panic_on_fail" # reboot the machine upon fatal boot issues
  ];
  systemd.services.sshd.wantedBy = lib.mkForce [ "multi-user.target" ];
  networking.hostName = lib.mkDefault "kexec";
}
EndOfMessage

TAR_DIR=$( nix-build --no-out-link '<nixpkgs/nixos>' \
    -A config.system.build.kexec_tarball \
    -I nixos-config="$VM_SETTINGS" \
    -I nixcfg="${CONFIG}" )
IMG=$(find "$TAR_DIR/tarball" -type f)


if [ $SCRIPT_MODE ]; then
    echo "$IMG"
else
    echo "[+] Generated kexec image to: $IMG"
fi



######################
#                    #
#       ISO          #
#                    #
######################
elif [ "$MODE" == "iso" ]; then
IMAGE_NAME="./nixos.iso"
cat > "$VM_SETTINGS" << EndOfMessage
{ ... }:
{
  imports = [
    <nixpkgs/nixos/modules/installer/cd-dvd/iso-image.nix>
    <nixcfg>
  ];

  # EFI booting
  isoImage.makeEfiBootable = true;

  # USB booting
  isoImage.makeUsbBootable = true;
}
EndOfMessage

ISO_DIR=$( nix-build --no-out-link '<nixpkgs/nixos>' \
    -A config.system.build.isoImage \
    -I nixos-config="$VM_SETTINGS" \
    -I nixcfg="${CONFIG}" )

if [ $SCRIPT_MODE ]; then
    echo " $ISO_DIR/iso/nixos.iso"
else
    echo "[+] Generated iso image to: $ISO_DIR/iso/nixos.iso"
fi

######################
#                    #
#   VM INSTALL ISO   #
#                    #
######################
elif [ "$MODE" == "install-iso" ]; then
IMAGE_NAME="./nixos.iso"
cat > "$VM_SETTINGS" << EndOfMessage
{ ... }:
{
  imports = [
    <nixpkgs/nixos/modules/installer/cd-dvd/installation-cd-base.nix>
    <nixcfg>
  ];
  # for installer
  isoImage.isoName = "nixos.iso";

  # override installation-cd-base and enable wpa and sshd start at boot
  systemd.services.wpa_supplicant.wantedBy = lib.mkForce [ "multi-user.target" ];
  systemd.services.sshd.wantedBy = lib.mkForce [ "multi-user.target" ];
}
EndOfMessage


ISO_DIR=$( nix-build --no-out-link '<nixpkgs/nixos>' \
    -A config.system.build.isoImage \
    -I nixos-config="$VM_SETTINGS" \
    -I nixcfg="${CONFIG}" )

if [ $SCRIPT_MODE ]; then
    echo "$ISO_DIR/iso/nixos.iso"
else
    echo "[+] Generated install iso image to: $ISO_DIR/iso/nixos.iso"
fi


######################
#                    #
#       END          #
#                    #
######################
else
    echo -e "$LRED[-] Mode: '$MODE' does not exist$NC"
    help
fi

# Cleanup
rm "$VM_SETTINGS"
